# -*- coding: utf-8 -*-
"""TutorAprendizado.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hIGwQT1uUvSfXlzeq5xF2uO_Kfq1T0xM
"""

# Commented out IPython magic to ensure Python compatibility.
import streamlit as st
import os
from datetime import date
from google.generativeai import configure as configure_gemini
import google.generativeai as gemini
import google.generativeai.types as genai_types # IMPORTANTE: Adicione esta linha
 
# # IMPORTANTE: A fun√ß√£o Google Search precisa estar definida ou import√°vel aqui.
# # Esta √© uma implementa√ß√£o dummy para que o c√≥digo funcione.
# # Sua fun√ß√£o real precisa fazer a busca na internet.
def google_search(query):
    st.warning(f"Usando fun√ß√£o 'google_search' dummy para: '{query}'. Por favor, substitua pela sua implementa√ß√£o real se for usar busca na internet.")
    return f"Informa√ß√µes encontradas sobre '{query}'."

 
# # --- CONFIGURA√á√ÉO DA API KEY ---
api_key = None
if os.getenv("GOOGLE_API_KEY"):
    api_key = os.getenv("GOOGLE_API_KEY")
elif "GOOGLE_API_KEY" in st.secrets:
    api_key = st.secrets["GOOGLE_API_KEY"]

if not api_key:
    st.error("API Key do Google n√£o encontrada. Por favor, certifique-se de que a `GOOGLE_API_KEY` est√° definida como um segredo no Colab (√≠cone de chave üîë na barra lateral) ou use a c√©lula de verifica√ß√£o de API Key.")
    st.stop()
else:
    configure_gemini(api_key=api_key)

MODEL_ID = "gemini-2.0-flash" # Use o mesmo modelo que voc√™ estava usando

# --- FUN√á√ïES AUXILIARES E DEFINI√á√ïES DE AGENTES ADAPTADAS ---

# FUN√á√ÉO CALL_AGENT MELHORADA PARA LIDAR COM FERRAMENTAS
def call_agent(model_obj, prompt_input):
    """
    Chama o modelo GenerativeModel com o prompt, tratando chamadas de ferramenta
    em um ciclo de conversa√ß√£o para garantir uma resposta de texto final.
    """
    try:
        chat = model_obj.start_chat(history=[])
        response = chat.send_message(prompt_input)

        # Loop para lidar com m√∫ltiplas voltas (chamadas de ferramentas e respostas)
        while True:
            # Verifica se a resposta final √© texto
            if response.text:
                return response.text

            # Se a resposta contiver chamadas de fun√ß√£o
            tool_calls = [part.function_call for part in response.parts if part.function_call]

            if tool_calls:
                tool_responses_for_model = []
                for fc in tool_calls:
                    function_name = fc.name
                    function_args = {k: v for k, v in fc.args.items()} # Converter args para dict

                    if function_name == "google_search":
                        st.info(f"Modelo solicitou google_search com: {function_args.get('query', '')}")
                        search_result = google_search(**function_args)
                        tool_responses_for_model.append(
                            genai_types.Part(
                                function_response=genai_types.FunctionResponse(
                                    name=function_name,
                                    response={"result": search_result} # O conte√∫do da resposta da ferramenta deve ser um dict
                                )
                            )
                        )
                    else:
                        st.warning(f"Fun√ß√£o desconhecida solicitada pelo modelo: {function_name}")
                        tool_responses_for_model.append(
                            genai_types.Part(
                                function_response=genai_types.FunctionResponse(
                                    name=function_name,
                                    response={"error": f"Fun√ß√£o desconhecida: {function_name}"}
                                )
                            )
                        )
                # Envia o resultado da ferramenta de volta para o modelo
                response = chat.send_message(tool_responses_for_model)
            else:
                # Se n√£o houver texto nem chamadas de fun√ß√£o, algo est√° errado
                st.error(f"Resposta do modelo inesperada: n√£o cont√©m texto nem chamadas de fun√ß√£o v√°lidas. Conte√∫do: {response}")
                return "Erro: Resposta inesperada do modelo."

    except Exception as e:
        # Captura erros gerais de API, rede, etc.
        st.error(f"Erro ao chamar modelo: {e}. Por favor, verifique sua conex√£o com a internet e a validade da sua API Key.")
        return f"Erro: {e}"


def to_markdown(text):
    return text # Streamlit j√° renderiza markdown diretamente

# --- Adapta√ß√£o da Cria√ß√£o dos Agentes para GenerativeModel ---
def criar_agente_recepcionista():
    return gemini.GenerativeModel(
        model_name=MODEL_ID,
        generation_config={"temperature": 0.5},
        system_instruction="Voc√™ √© o agente recepcionista. Sua tarefa √© entender o perfil do aluno (idade/n√≠vel, objetivo, estilo de aprendizado) atrav√©s das respostas dadas e sumariz√°-lo em 2-3 frases de forma concisa para que um professor de IA possa adaptar o ensino."
    )

def criar_agente_buscador():
    return gemini.GenerativeModel(
        model_name=MODEL_ID,
       tools=[google_search], # Adiciona a ferramenta Google Search aqui
        generation_config={"temperature": 0.5},
        system_instruction="Voc√™ √© um agente buscador. Sua tarefa √© usar a fun√ß√£o `google_search` para encontrar informa√ß√µes relevantes sobre o t√≥pico de estudo e os pontos chave de acordo com o perfil do aluno. Retorne os pontos chave e as URLs das fontes."
    )

def criar_agente_redator():
    return gemini.GenerativeModel(
        model_name=MODEL_ID,
        generation_config={"temperature": 0.7},
        system_instruction="Voc√™ √© um agente redator de aulas. Sua tarefa √© redigir uma aula completa, did√°tica e adaptada ao perfil do aluno, utilizando as informa√ß√µes de base fornecidas."
    )

def criar_agente_review():
    return gemini.GenerativeModel(
        model_name=MODEL_ID,
        generation_config={"temperature": 0.5},
        system_instruction="Voc√™ √© um agente de revis√£o. Sua tarefa √© fazer um resumo conciso dos pontos-chave da aula e indicar materiais/fontes adicionais para revis√£o."
    )

def criar_agente_duvidas():
    return gemini.GenerativeModel(
        model_name=MODEL_ID,
        tools=[google_search], # Adiciona a ferramenta Google Search aqui
        generation_config={"temperature": 0.5},
        system_instruction="Voc√™ √© um agente tira-d√∫vidas. Sua tarefa √© responder √†s perguntas do aluno usando as informa√ß√µes da aula, o perfil do aluno e, se necess√°rio, buscando informa√ß√µes adicionais com `Google Search`. Seja claro e objetivo."
    )
def criar_agente_salvador_local():
    return gemini.GenerativeModel(
        model_name=MODEL_ID,
        generation_config={"temperature": 0.5},
        system_instruction="Voc√™ √© um agente finalizador. Sua tarefa √© perguntar ao aluno se ele deseja salvar o conte√∫do completo desta sess√£o em um arquivo local, de forma amig√°vel."
    )

 # --- INICIALIZA√á√ÉO DO ESTADO DA SESS√ÉO ---
if 'current_stage' not in st.session_state:
    st.session_state.current_stage = "start"
    st.session_state.perfil_raw_answers = {}
    st.session_state.perfil_do_aluno_sumarizado = ""
    st.session_state.topico_estudo = ""
    st.session_state.texto_final_aula = ""
    st.session_state.material_revisao = ""
    st.session_state.historico_duvidas = ""
    st.session_state.agente_recepcionista_obj = None
    st.session_state.agente_buscador_obj = None
    st.session_state.agente_redator_obj = None
    st.session_state.agente_review_obj = None
    st.session_state.agente_duvidas_obj = None
    st.session_state.agente_salvador_local_obj = None
    st.session_state.perguntas_perfil = [
        "Qual a sua idade ou n√≠vel de ensino (ex: '10 anos', 'ensino m√©dio', 'gradua√ß√£o', 'especialista')?",
        "Qual o seu objetivo principal ao aprender este t√≥pico (ex: 'entender o b√°sico', 'aprofundar para um projeto', 'revisar para prova')?",
        "Qual a sua forma preferida de aprender (ex: 'exemplos pr√°ticos', 'teoria aprofundada', 'resumos e mapas mentais')?"
    ]
    st.session_state.perfil_step = 0

# --- FUN√á√ïES PARA CADA ETAPA DO FLUXO ---
def start_session():
   st.session_state.agente_recepcionista_obj = criar_agente_recepcionista()
   st.session_state.current_stage = "perfil"
    # N√£o precisamos de st.rerun() aqui, o script vai re-executar e exibir a pr√≥xima se√ß√£o
def summarize_perfil_and_move_to_topic():
    respostas_concatenadas = "\n".join([f"{q}: {st.session_state.perfil_raw_answers[q]}" for q in st.session_state.perguntas_perfil])
    entrada_para_recepcionista = f"""
    Respostas do aluno sobre o perfil:
    {respostas_concatenadas}
    ---
    Por favor, sumarize este perfil em 2-3 frases, focando no n√≠vel de conhecimento, objetivo e estilo de aprendizado do aluno, para que um professor de IA possa adaptar o ensino.
    """
    with st.spinner("Analisando seu perfil..."):
        st.session_state.perfil_do_aluno_sumarizado = call_agent(st.session_state.agente_recepcionista_obj,
                                                                entrada_para_recepcionista)
    st.success("Perfil analisado!")
    st.session_state.current_stage = "topico" # Marca que o perfil foi processado e o t√≥pico pode ser pedido
    st.rerun() # Dispara a re-execu√ß√£o para exibir a pr√≥xima se√ß√£o
def generate_lesson_and_review():
    st.session_state.agente_buscador_obj = criar_agente_buscador()
    st.session_state.agente_redator_obj = criar_agente_redator()
    st.session_state.agente_review_obj = criar_agente_review()
    with st.spinner("Buscando informa√ß√µes e redigindo a aula..."):
        entrada_para_buscador = f"T√ìPICO: {st.session_state.topico_estudo}\nPERFIL DO ALUNO: {st.session_state.perfil_do_aluno_sumarizado}"
        pontos_chave_e_fontes = call_agent(st.session_state.agente_buscador_obj,
                                        entrada_para_buscador)
        entrada_para_redator = f"""
        T√ìPICO: {st.session_state.topico_estudo}
        PERFIL DO ALUNO: {st.session_state.perfil_do_aluno_sumarizado}
        INFORMA√á√ïES DE BASE:
        {pontos_chave_e_fontes}
        ---
        Por favor, redija uma aula completa e did√°tica.
        """
        st.session_state.texto_final_aula = call_agent(st.session_state.agente_redator_obj,
                                                    entrada_para_redator)
    st.success("Aula gerada!")
    with st.spinner("Gerando material de revis√£o..."):
        entrada_para_review = f"""
        T√ìPICO: {st.session_state.topico_estudo}
        PERFIL DO ALUNO: {st.session_state.perfil_do_aluno_sumarizado}
        CONTE√öDO DA AULA:
        {st.session_state.texto_final_aula}
        ---
        Por favor, fa√ßa um resumo e indique fontes para revis√£o.
        """
        st.session_state.material_revisao = call_agent(st.session_state.agente_review_obj,
                                                        entrada_para_review)
    st.success("Material de revis√£o pronto!")
    st.session_state.current_stage = "aula_gerada" # Nova etapa para indicar que aula e resumo est√£o prontos
    st.rerun() # Dispara a re-execu√ß√£o para exibir a aula e a se√ß√£o de d√∫vidas
def process_duvida_input(duvida_aluno):
    if not st.session_state.agente_duvidas_obj:
        st.session_state.agente_duvidas_obj = criar_agente_duvidas()
        st.session_state.historico_duvidas += f"Aluno D√∫vida: {duvida_aluno}\n"
      entrada_para_duvidas = f"""
 D√öVIDA DO ALUNO: {duvida_aluno}
 T√ìPICO GERAL: {st.session_state.topico_estudo}
 PERFIL DO ALUNO: {st.session_state.perfil_do_aluno_sumarizado}
 CONTE√öDO ANTERIOR (para contexto):
 {st.session_state.texto_final_aula}
 {st.session_state.material_revisao}
 ---
 Por favor, responda a d√∫vida do aluno utilizando busca na internet e adaptando ao perfil.
 """
    with st.spinner("Buscando a resposta para sua d√∫vida..."):
        resposta_do_agente_duvidas = call_agent(st.session_state.agente_duvidas_obj,
                                                entrada_para_duvidas)
      st.session_state.historico_duvidas += f"Professor D√∫vidas: {resposta_do_agente_duvidas}\n---\n"
    st.rerun() # Para atualizar o hist√≥rico de d√∫vidas na tela
 
def prepare_and_offer_download():
    st.session_state.agente_salvador_local_obj = criar_agente_salvador_local()

    conteudo_completo_sessao = f"""
# Relat√≥rio da Sess√£o de Estudo: {st.session_state.topico_estudo}

**Data:** {date.today().strftime('%Y-%m-%d')}
**Perfil do Aluno:** {st.session_state.perfil_do_aluno_sumarizado}

---

## Conte√∫do da Aula

{st.session_state.texto_final_aula}

---

## Resumo e Materiais Adicionais

{st.session_state.material_revisao}

---

## Hist√≥rico da Sess√£o de D√∫vidas

{st.session_state.historico_duvidas.strip() if st.session_state.historico_duvidas.strip() else "Nenhum hist√≥rico de d√∫vidas registrado."}

# ---
# """
    st.markdown("---")
    st.markdown("## üíæ Finalizando a Sess√£o de Estudo")
    st.markdown("Chamando o Agente Salvador para perguntar sobre salvar...")

    entrada_para_salvador_local = f"""
CONTE√öDO COMPLETO DA SESS√ÉO (amostra):
{conteudo_completo_sessao[:1500]}
---
Por favor, fa√ßa a pergunta sobre salvar o conte√∫do completo desta sess√£o em um arquivo local, de forma amig√°vel.
"""
    pergunta_do_salvador = call_agent(st.session_state.agente_salvador_local_obj,
                                    entrada_para_salvador_local)
    st.markdown(pergunta_do_salvador)

    st.download_button(
        label="Baixar Conte√∫do da Sess√£o",
        data=conteudo_completo_sessao.encode("utf-8"),
        file_name=f"Sessao_Estudo_{st.session_state.topico_estudo.replace(' ', '_').replace('/', '-')}_{date.today().strftime('%Y%m%d')}.md",
        mime="text/markdown"
    )
    st.session_state.current_stage = "end"
    # N√£o precisa de rerun aqui, pois √© a tela final e o bot√£o de recome√ßar j√° faz isso

# --- INTERFACE DO USU√ÅRIO BASEADA NO ESTADO ---
st.set_page_config(page_title="Sistema de Aprendizado com Agentes IA", layout="wide")
st.title("üìö Sistema de Aprendizado Interativo com Agentes IA")
st.write("Um tutor virtual personalizado para te guiar no estudo de qualquer t√≥pico!")

# Se√ß√£o 1: In√≠cio
if st.session_state.current_stage == "start":
    st.write("Bem-vindo ao seu tutor de IA personalizado! Vamos come√ßar configurando seu perfil.")
    if st.button("Iniciar Sess√£o de Estudo"):
        start_session()
        st.rerun()

# Se√ß√£o 2: Perfil do Aluno
if st.session_state.current_stage in ["perfil", "topico", "aula_gerada", "ask_duvidas", "salvar", "end"]:
    st.markdown("---")
    st.markdown("## üë§ Configurando Seu Perfil de Aprendizado")
    # Exibe as perguntas do perfil e as respostas j√° dadas
    for i, pergunta in enumerate(st.session_state.perguntas_perfil):
        if pergunta in st.session_state.perfil_raw_answers:
            st.markdown(f"**{pergunta}**")
            st.write(st.session_state.perfil_raw_answers[pergunta])
        elif st.session_state.current_stage == "perfil" and i == st.session_state.perfil_step:
            # Exibe a pergunta atual apenas se estiver na etapa de perfil
            resposta_perfil = st.text_input(pergunta, key=f"pergunta_perfil_{st.session_state.perfil_step}")
            if st.button("Pr√≥xima Pergunta", key=f"btn_perfil_{st.session_state.perfil_step}"):
                if resposta_perfil:
                    st.session_state.perfil_raw_answers[pergunta] = resposta_perfil
                    st.session_state.perfil_step += 1
                    st.rerun()
                else:
                    st.warning("Por favor, responda √† pergunta antes de continuar.")
            break # Sai do loop para exibir apenas uma pergunta por vez

    if st.session_state.perfil_step >= len(st.session_state.perguntas_perfil) and not st.session_state.perfil_do_aluno_sumarizado:
        # Se todas as perguntas foram respondidas mas o perfil n√£o foi sumarizado
        summarize_perfil_and_move_to_topic() # Isso j√° dispara um rerun

    if st.session_state.perfil_do_aluno_sumarizado:
        st.markdown(f"**Seu Perfil Sumarizado:** {st.session_state.perfil_do_aluno_sumarizado}")

# Se√ß√£o 3: T√≥pico de Estudo
if st.session_state.current_stage in ["topico", "aula_gerada", "ask_duvidas", "salvar", "end"]:
    st.markdown("---")
    st.markdown("## üìö Qual T√≥pico Voc√™ Deseja Estudar Hoje?")
    if not st.session_state.topico_estudo: # Apenas mostra o input se o t√≥pico ainda n√£o foi definido
        st.session_state.topico_estudo = st.text_input("Digite o t√≥pico (ex: 'Introdu√ß√£o √† Programa√ß√£o Python', 'Hist√≥ria da Revolu√ß√£o Francesa'):", key="topico_input")
        if st.button("Gerar Aula e Resumo", key="btn_gerar_aula"):
            if st.session_state.topico_estudo:
                generate_lesson_and_review() # Isso j√° dispara um rerun
            else:
                st.warning("Por favor, digite um t√≥pico para estudar.")
    else:
        st.markdown(f"**T√≥pico de Estudo:** {st.session_state.topico_estudo}")
        # Se o t√≥pico j√° foi definido e a aula n√£o foi gerada ainda, gera.
        if not st.session_state.texto_final_aula:
            generate_lesson_and_review() # Isso j√° dispara um rerun

# Se√ß√£o 4: Aula e Resumo
if st.session_state.current_stage in ["aula_gerada", "ask_duvidas", "salvar", "end"]:
    if st.session_state.texto_final_aula: # Garante que o texto existe antes de exibir
        st.markdown("---")
        st.markdown("## üìñ Sua Aula:")
        st.markdown(st.session_state.texto_final_aula)

        st.markdown("---")
        st.markdown("## ‚ú® Resumo e Materiais Adicionais:")
        st.markdown(st.session_state.material_revisao)

    # Agora, se o current_stage for "aula_gerada", transicione para "ask_duvidas" para exibir a se√ß√£o de d√∫vidas
    if st.session_state.current_stage == "aula_gerada":
        st.session_state.current_stage = "ask_duvidas"
        st.rerun()


# Se√ß√£o 5: D√∫vidas
if st.session_state.current_stage in ["ask_duvidas", "salvar", "end"]:
    st.markdown("---")
    st.markdown("## ü§î Hora de Tirar D√∫vidas!")
    st.write("Estou pronto para responder suas perguntas sobre o t√≥pico. Pergunte o que quiser!")
    st.write("Quando terminar, clique em 'Finalizar Sess√£o de D√∫vidas'.")

    if st.session_state.historico_duvidas:
        st.markdown("---")
        st.markdown("### Hist√≥rico de D√∫vidas:")
        st.markdown(st.session_state.historico_duvidas)
        st.markdown("---")

    duvida_input = st.text_input("Sua d√∫vida:", key="duvida_input_field")

    col1, col2 = st.columns(2)
    with col1:
        if st.button("Perguntar", key="btn_perguntar_duvida"):
            if duvida_input:
                process_duvida_input(duvida_input)
                # N√£o precisa limpar duvida_input aqui, o rerun j√° far√° isso
            else:
                st.warning("Por favor, digite sua d√∫vida.")
    with col2:
        if st.button("Finalizar Sess√£o de D√∫vidas", key="btn_finalizar_duvidas"):
            st.session_state.current_stage = "salvar"
            st.rerun()

# Se√ß√£o 6: Salvar e Finalizar
if st.session_state.current_stage in ["salvar", "end"]:
    prepare_and_offer_download() # Esta fun√ß√£o j√° exibe o download button

    if st.button("Iniciar Nova Sess√£o", key="btn_nova_sessao_fim"):
        st.session_state.clear()
        st.rerun()

if st.session_state.current_stage == "end":
    st.markdown("---")
    st.success("üéâ Sess√£o de Estudo Finalizada! Espero ter ajudado. Voc√™ pode baixar o conte√∫do gerado acima.")
    if st.button("Recome√ßar", key="btn_recomecar_final"):
        st.session_state.clear()
        st.rerun()
import os
i,port getpass
if "GOOGLE_API_KEY" not in os.environ:
   print("GOOGLE_API_KEY n√£o encontrada nas vari√°veis de ambiente.")
   print("Por favor, cole sua chave API do Google (Gemini) abaixo e pressione Enter:")
    api_key_input = getpass.getpass("GOOGLE_API_KEY: ")
    if api_key_input:
       os.environ["GOOGLE_API_KEY"] = api_key_input
       print("GOOGLE_API_KEY definida com sucesso para esta sess√£o!")
   else:
       print("Aten√ß√£o: A chave API n√£o foi fornecida.")
else:
   print("GOOGLE_API_KEY j√° est√° definida nas vari√°veis de ambiente. Tudo pronto!")
